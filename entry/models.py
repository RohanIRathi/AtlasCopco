from datetime import datetime
from atlas_project.settings import TIME_ZONE
from django.db import models
from django.core.validators import EmailValidator, MinLengthValidator
from django.contrib.auth.models import User




class Visitor(models.Model):
	name = models.CharField(verbose_name='Name', max_length=200, validators=[
		MinLengthValidator(2, 'Minimum 2 Characters are required')])  # name of the visitor
	purpose = models.CharField(verbose_name='Purpose', max_length=200, validators=[
		MinLengthValidator(4, 'Minimum 4 characters are required')])  # purpose of visit
	mobile = models.IntegerField(verbose_name='Mobile number')  # mobile no. of the visitor
	email = models.EmailField(verbose_name='Email', validators=[EmailValidator()])  # email address of the visitor
	no_of_people = models.IntegerField(verbose_name='No of people')  # no. of visitors
	photo_id_number = models.CharField(verbose_name='Photo Id Number', max_length=20, null=True, blank=True)
	photo_id = models.ImageField(verbose_name='Photo Id', upload_to='media/photo_id', null=True, blank=True)
	expected_in_time = models.DateTimeField(verbose_name='Expected Visit In Time', null=True, blank=True)
	in_time = models.DateTimeField(verbose_name='Visit In time', null=True, blank=True)  # in time of the visitor, added automatically
	out_time = models.DateTimeField(verbose_name='Visit Out Time', null=True, blank=True)  # out time of the visitor added automatically
	token = models.CharField(verbose_name='Token', max_length=200, null=True, blank=True)  # token(autogenerated)
	qrcode = models.ImageField(verbose_name='QR Code', upload_to='media/qrcodes', null=True, blank=True)  # qr code generated from the token
	user = models.ForeignKey(User, verbose_name='Employee to visit', on_delete=models.PROTECT)  # link to the User table, to store which user allowed the entry
	photo = models.ImageField(verbose_name='Photo of the Visitor', upload_to='media/photo', null=True, blank=True)
	visit_token = models.CharField(max_length=200, verbose_name="Token assigned to the Visitor", null=True, blank=True)
	session_expired = models.BooleanField(default=False)
	
	def __str__(self):
		return self.name
